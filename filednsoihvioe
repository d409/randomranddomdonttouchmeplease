import logging
import sqlite3

def create_users_table():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        name TEXT NOT NULL,
                        phone TEXT,
                        registered INTEGER NOT NULL DEFAULT 0
                    )""")
    conn.commit()
    conn.close()

create_users_table()  # –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.utils.markdown import text, hlink
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logging.basicConfig(level=logging.INFO)

API_TOKEN = '5741958407:AAFlowMVLrQM2brVpCMDx9yRNs27sMy3XsE'

bot = Bot(token=API_TOKEN)

dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# Database functions
def connect_to_db():
    connection = sqlite3.connect("services.db")
    cursor = connection.cursor()
    return connection, cursor

def create_tables():
    connection, cursor = connect_to_db()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                     (id INTEGER PRIMARY KEY, name TEXT, service TEXT, city TEXT, bio TEXT, portfolio TEXT)''')
    connection.commit()
    connection.close()

def add_user(user_id, name, service, city, bio, portfolio):
    connection, cursor = connect_to_db()
    cursor.execute("INSERT INTO users (id, name, service, city, bio, portfolio) VALUES (?, ?, ?, ?, ?, ?)",
                   (user_id, name, service, city, bio, portfolio))
    connection.commit()
    connection.close()

def get_user(user_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))  # –ò–∑–º–µ–Ω–∏—Ç–µ 'id' –Ω–∞ 'user_id'
    user = cursor.fetchone()
    conn.close()
    return user

def update_user(user_id, name, service, city, bio, portfolio):
    connection, cursor = connect_to_db()
    cursor.execute("UPDATE users SET name=?, service=?, city=?, bio=?, portfolio=? WHERE id=?",
                   (name, service, city, bio, portfolio, user_id))
    connection.commit()
    connection.close()

def get_ads_by_criteria(service, city):
    connection, cursor = connect_to_db()
    if city == "–í—Å–µ –≥–æ—Ä–æ–¥–∞":
        cursor.execute("SELECT * FROM users WHERE service=?", (service,))
    else:
        cursor.execute("SELECT * FROM users WHERE service=? AND city=?", (service, city))
    ads = cursor.fetchall()
    connection.close()
    return ads

create_tables()

# Keyboards
def main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    keyboard.add("üîç –ù–∞–π—Ç–∏ —É—Å–ª—É–≥—É")
    keyboard.add("üë§ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    return keyboard

def back_to_main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é")
    return keyboard

def open_profile_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é")
    return keyboard

def services_inline_keyboard():
    keyboard = InlineKeyboardMarkup()
    services = ["–£—Å–ª—É–≥–∞ 1", "–£—Å–ª—É–≥–∞ 2", "–£—Å–ª—É–≥–∞ 3", "–£—Å–ª—É–≥–∞ 4", "–£—Å–ª—É–≥–∞ 5"]
    for service in services:
        button = InlineKeyboardButton(service, callback_data=f'select_service_{service}')
        keyboard.add(button)
    return keyboard

def cities_inline_keyboard():
    keyboard = InlineKeyboardMarkup()
    cities = ["–ì–æ—Ä–æ–¥ 1", "–ì–æ—Ä–æ–¥ 2", "–ì–æ—Ä–æ–¥ 3", "–ì–æ—Ä–æ–¥ 4", "–ì–æ—Ä–æ–¥ 5", "–í—Å–µ –≥–æ—Ä–æ–¥–∞"]
    for city in cities:
        button = InlineKeyboardButton(city, callback_data=f'select_city_{city}')
        keyboard.add(button)
    return keyboard

def registration_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    keyboard.add("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é")
    return keyboard

# Handlers
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É—Å–ª—É–≥–∏.", reply_markup=main_menu_keyboard())

@dp.message_handler(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é")
async def main_menu(message: types.Message):
    await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())

@dp.message_handler(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def create_ad(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if user:
        await message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?", reply_markup=open_profile_keyboard())
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.", reply_markup=back_to_main_menu_keyboard())
        state = dp.current_state(user=message.from_user.id)
        await state.next()


@dp.message_handler(lambda message: message.text not in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"], state=0)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ.", reply_markup=services_inline_keyboard())

@dp.callback_query_handler(lambda call: call.data.startswith('select_service_'), state=0)
async def select_service_callback(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    selected_service = call.data[len('select_service_'):]

    async with state.proxy() as data:
        data['service'] = selected_service

    await call.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.", reply_markup=cities_inline_keyboard())

@dp.callback_query_handler(lambda call: call.data.startswith('select_city_'), state=0)
async def select_city(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    selected_city = call.data[len('select_city_'):]

    async with state.proxy() as data:
        data['city'] = selected_city

    await call.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ.", reply_markup=back_to_main_menu_keyboard())

    state = dp.current_state(user=message.from_user.id)
    await state.next()


@dp.message_handler(lambda message: message.text not in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"], state=1)
async def process_bio(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['bio'] = message.text

    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ.", reply_markup=back_to_main_menu_keyboard())

    state = dp.current_state(user=message.from_user.id)
    await state.next()

@dp.message_handler(lambda message: message.text not in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"], state=2)
async def process_portfolio(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['portfolio'] = message.text

        user_id = message.from_user.id
        name = data['name']
        service = data['service']
        city = data['city']
        bio = data['bio']
        portfolio = data['portfolio']

        add_user(user_id, name, service, city, bio, portfolio)

    await message.reply("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –Ω–∞–π—Ç–∏ —É—Å–ª—É–≥–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=main_menu_keyboard())
    await state.finish()

@dp.message_handler(lambda message: message.text == "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def open_profile(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if user:
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user[1]}! –í–∞—à–∞ —É—Å–ª—É–≥–∞: {user[2]}\n–í–∞—à –≥–æ—Ä–æ–¥: {user[3]}\n–í–∞—à–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏—è: {user[4]}\n–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {user[5]}", reply_markup=open_profile_keyboard())
    else:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?", reply_markup=registration_keyboard())

@dp.message_handler(lambda message: message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def edit_profile(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å—Ç–∞—Ä—ã–µ, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –∏—Ö –º–µ–Ω—è—Ç—å).", reply_markup=back_to_main_menu_keyboard())
    state = dp.current_state(user=message.from_user.id)
    await state.next()


# Continue with the rest of the code from the previous message.
@dp.message_handler(lambda message: message.text not in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"], state=3)
async def process_edit_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['new_name'] = message.text

    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —É—Å–ª—É–≥—É (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å—Ç–∞—Ä—É—é, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –µ–µ –º–µ–Ω—è—Ç—å).", reply_markup=back_to_main_menu_keyboard())
    state = dp.current_state(user=message.from_user.id)
    await state.next()


@dp.message_handler(lambda message: message.text not in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"], state=4)
async def process_edit_service(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['new_service'] = message.text

    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å—Ç–∞—Ä—ã–π, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –º–µ–Ω—è—Ç—å).", reply_markup=cities_keyboard())
    state = dp.current_state(user=message.from_user.id)
    await state.next()


@dp.callback_query_handler(lambda call: call.data.startswith('city_'), state=5)
async def process_edit_city(call: types.CallbackQuery, state: FSMContext):
    city_id = int(call.data[5:])
    city = cities[city_id]

    async with state.proxy() as data:
        data['new_city'] = city

    await call.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å—Ç–∞—Ä—É—é, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –µ–µ –º–µ–Ω—è—Ç—å). –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º –æ—Ç 20 –¥–æ 160.", reply_markup=back_to_main_menu_keyboard())
    state = dp.current_state(user=message.from_user.id)
    await state.next()


@dp.message_handler(lambda message: message.text not in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"], state=6)
async def process_edit_bio(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['new_bio'] = message.text

    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –Ω–æ–≤–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ. (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å—Ç–∞—Ä–æ–µ, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –º–µ–Ω—è—Ç—å).", reply_markup=back_to_main_menu_keyboard())
    state = dp.current_state(user=message.from_user.id)
    await state.next()


@dp.message_handler(lambda message: message.text not in ["–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"], state=7)
async def process_edit_portfolio(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['new_portfolio'] = message.text

        user_id = message.from_user.id
        new_name = data['new_name']
        new_service = data['new_service']
        new_city = data['new_city']
        new_bio = data['new_bio']
        new_portfolio = data['new_portfolio']

        update_user(user_id, new_name, new_service, new_city, new_bio, new_portfolio)

    await message.reply("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –Ω–∞–π—Ç–∏ —É—Å–ª—É–≥–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=main_menu_keyboard())
    await state.finish()

# ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞)
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp)
